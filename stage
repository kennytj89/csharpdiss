using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Stage : MonoBehaviour
{

    public Transform memberPrefab;
    public Transform enemyPrefab;
    public int numberOfMembers;
    public int numberOfEnemies;
    public List<Member> members;
    public List<Enemy> enemies;
    public float bounds;
    public float spawnRadius;

    //Initialisation scripts to create the agents on spawn.
    void Start() {
        members = new List<Member>();
        enemies = new List<Enemy>();

        Spawn(memberPrefab, numberOfMembers);
        Spawn(enemyPrefab, numberOfEnemies);

        members.AddRange(FindObjectsOfType<Member>());
        enemies.AddRange(FindObjectsOfType<Enemy>());
    }

    //Sets agent spawns
    void Spawn(Transform prefab, int count)
    {
        for(int i = 0; i < count; i++)
        {
            Instantiate(prefab, new Vector3(Random.Range(-spawnRadius, spawnRadius), Random.Range(-spawnRadius, spawnRadius), 0),
                Quaternion.identity);
        }
    }

    //Sets list of agents to be generated
    public List<Member> GetNeighbours(Member member, float radius)
    {
        List<Member> neighboursFound = new List<Member>();

        foreach (var otherMember in members)
        {
            if (otherMember == member)
                continue;
            if (Vector3.Distance(member.Position, otherMember.Position) <= radius)
            {
                neighboursFound.Add(otherMember);
            }
        }

        return neighboursFound;
    }

    //Sets list for enemy agents to be generated
    public List<Enemy> GetEnemies(Member member, float radius)
      {
        List<Enemy> returnEnemies = new List<Enemy>();
        foreach (var enemy in enemies)
          {
            if (Vector3.Distance(member.Position, enemy.Position) <= radius)
              {
                returnEnemies.Add(enemy);
              }

          }
          return returnEnemies;
      }
}
